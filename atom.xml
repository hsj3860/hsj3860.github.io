<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of HSJ</title>
  
  <subtitle>My passages and ideas about many things</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-04T16:21:09.281Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HSJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intro to GNU Make</title>
    <link href="http://example.com/2022/10/04/Intro-to-GNU-Make/"/>
    <id>http://example.com/2022/10/04/Intro-to-GNU-Make/</id>
    <published>2022-10-04T03:00:26.000Z</published>
    <updated>2022-10-04T16:21:09.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>什么是<code>makefile</code>？事实上它是一个项目编译的指导性文件，它定义了一系列的规则，指导编译器工作。会写<code>makefile</code>是程序员工程能力的体现。</p><p>这篇文章将讲述：</p><ul><li>编译和链接的知识</li><li>如何写<code>makefile</code></li></ul><p>主要参考了<a href="https://seisman.github.io/how-to-write-makefile/overview.html">这个教程</a>。</p><blockquote><p>开发平台：</p><ul><li>机器：MacBook Pro（13-inch，M1，2020），macOS Monterey 12.6</li><li>编译器：Clang</li></ul></blockquote><h1 id="程序的编译和链接"><a href="#程序的编译和链接" class="headerlink" title="程序的编译和链接"></a>程序的编译和链接</h1><p>在计算机基础中，我们知道了C的编译系统是如何工作的：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR   A[(预处理)]--&gt;B[(编  译)]--&gt;C[(汇  编)]--&gt;D[(链  接)]  </pre></div><p>以我们的hello.c生成可执行文件为例：</p><p><img src="/images/Intro-to-GNU-Make/%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B.png" alt="可执行文件生成"></p><p>预处理阶段，我们主要处理宏、头文件引用、条件编译、编译器特殊命令（<code>#pragma</code>）等。由预处理器完成。</p><p>编译与汇编阶段则是将我们的代码文件“转化”为中间目标文件（.o &#x2F; .obj）等。但这一步事实上并没有生成可执行文件，只是检查了语法的正确性、函数与变量声明的正确。</p><p>但能通过编译、汇编并不意味着程序的正确，它还需要通过最后一步：链接。比如声明了函数却没有定义，那么编译可以通过但链接不能通过。</p><p>链接过程实际上是把多个可重定位文件合并成一个可执行文件的过程。这个过程中最重要的两个步骤是<strong>符号解析</strong>和<strong>重定位</strong>。</p><blockquote><ol><li><strong>符号解析</strong>，就是根据编译器生成的可重定位文件中的符号表，来使符号定义和符号引用一一对应并关联。</li><li><strong>重定位</strong>，就是将每个符号和内存中的一个位置关联起来，然后修改代码中所有对这些符号的引用，使它们指向这个内存位置。</li></ol></blockquote><p>静态库的符号解析的工作过程：</p><ol><li>维护集合$E$、$U$、$D$</li><li>将目标文件加入$E$、未定义符号加入$U$、定义符号加入$D$</li><li>扫描静态库，选择与$U$中内容匹配的内容，将文件放入$E$，并将在U中对应的内容移入$D$中</li><li>若最终$U$为空，则生成可执行文件</li></ol><p>之后，便是重定位过程，这里不再细谈。</p><h1 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>首先，我们需要介绍一下基本的规则：</p><ol><li>如果这个工程没有编译过，那么我们的所有<code>c</code>文件都要编译并被链接。</li><li>如果这个工程的某几个<code>c</code>文件被修改，那么我们只编译被修改的<code>c</code>文件，并链接目标程序。</li><li>如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的<code>c</code>文件，并链接目标程序。</li></ol><p>如果我们的<code>makefile</code>写得足够好，一个<code>make</code>命令就能完成所有的编译。</p><p>下边是<code>makefile</code>的基本语法介绍：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target ... : pre ...</span><br><span class="line">cmd</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>target</code>：可以是一个目标文件（object file），也可以是一个执行文件，也可以是一个标签（label）</p><p><code>pre</code>：生成<code>target</code>所依赖的文件和&#x2F;或<code>target</code></p><p><code>cmd</code>： 该<code>target</code>要执行的命令</p></blockquote><p>用一句话总结：</p><blockquote><p><code>pre</code>中如果有一个以上的文件比<code>target</code>文件要新的话，<code>cmd</code>所定义的命令就会被执行。</p></blockquote><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><p>下面，我们来一个实例，一个较为复杂的实例。</p><p>背景知识：clang编译器的编译命令(C++)如何编译多文件程序？</p><p>假设我们有这几个文件：</p><ol><li><p><code>main.cpp</code></p></li><li><p><code>head.h</code></p></li><li><p><code>add.cpp</code></p></li><li><p><code>mul.cpp</code></p></li><li><p><code>sub.cpp</code></p></li></ol><p> 关系为：</p><p>  <code>main.cpp</code> 引用了<code>head.h</code>中声明的函数； </p><p> <code>head.h</code>中声明的函数，实现在<code>add.cpp</code>、 <code> mul.cpp</code>、 <code> sub.cpp</code>中</p><p> 那么我们的编译指令有：</p><p> 一行编译：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ main.cpp add.cpp sub.cpp mul.cpp -o app</span><br></pre></td></tr></table></figure><p> 若要分开编译，有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clang++ -c main.cpp</span><br><span class="line">clang++ -c add.cpp</span><br><span class="line">clang++ -c sub.cpp</span><br><span class="line">clang++ -c mul.cpp</span><br><span class="line">clang++ main.o add.o sub.o mul.o -o app</span><br></pre></td></tr></table></figure><p> 参考分开编译的这一系列编译指令的思路，我们可以写出我们的<code>makefile</code>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">app: main.o add.o sub.o mul.o</span></span><br><span class="line">clang++ -o app main.o add.o sub.o mul.o</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp head.h </span></span><br><span class="line">clang++ -c main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">add.o: add.cpp head.h</span></span><br><span class="line">clang++ -c add.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">sub.o: sub.cpp head.h</span></span><br><span class="line">clang++ -c sub.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">mul.o: mul.cpp head.h</span></span><br><span class="line">clang++ -c mul.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm app *.o</span><br></pre></td></tr></table></figure><blockquote><p>注意：命令行前头必须以制表符开头，否则文件无效！</p></blockquote><p>这样，我们就得到了我们的<code>makefile</code>，在命令行中输入<code>make</code>以后就可以编译出<code>app</code>可执行文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>这样我们就可以得到我们所需要的最终目标文件。</p><p>那么，我们可以解释一下这些命令。</p><p>首先，我们的目标文件是<code>app</code>，它依赖于后面四个目标文件生成；</p><p>其次，四个目标文件依赖于对应的代码文件生成。</p><p>最后，我们定义了<code>clean</code>，它并不是一个文件，仅仅只是一个动作名字而已，这里我们用来清理我们编译过程所生成的文件。当然，我们还可以定义其他的操作，比如打包、备份等。</p><h2 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="make是如何工作的"></a>make是如何工作的</h2><p>在默认的方式下，也就是我们只输入 <code>make</code> 命令。那么，</p><ol><li><code>make</code>会在当前目录下找名字叫“Makefile”或“makefile”的文件。</li><li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到<code>app</code>这个文件，并把这个文件作为最终的目标文件。</li><li>如果<code>app</code>文件不存在，或是<code>app</code>所依赖的后面的 <code>.o</code> 文件的文件修改时间要比 <code>app</code> 这个文件新，那么，他就会执行后面所定义的命令来生成 <code>app</code> 这个文件。</li><li>如果 <code>app</code> 所依赖的 <code>.o</code> 文件也不存在，那么<code>make</code>会在当前文件中找目标为 <code>.o</code> 文件的依赖性，如果找到则再根据那一个规则生成 <code>.o</code> 文件。（这有点像一个堆栈的过程）</li><li>当然，你的C文件和H文件是存在的啦，于是<code>make</code>会生成 <code>.o</code> 文件，然后再用 <code>.o</code> 文件生成<code>make</code>的终极任务，也就是执行文件 <code>app</code> 了。</li></ol><p>因此，不少的<code>makefile</code>会把最终的目标文件写在第一个目标文件的位置。</p><p>当然，如果也可以显式地制定我们的目标文件，比如对于上边的例子，我们就可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make app</span><br></pre></td></tr></table></figure><p>这个<code>shell</code>指令与<code>make</code>是等价的，当然，要执行我们的<code>clean</code>指令也可以使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>下面，我们使用变量“化简”一下<code>makefile</code>。</p><p>变量的一大作用就是具有复用性，我们不需要把同样的长字符串到处写。同时，如果要修改，只需要修改一处就好。</p><p>这里，我们看到<code>main.o add.o sub.o mul.o</code>这一长串的东西出现了两次，那么我们就可以用一个变量来代替；同时，我们也可以把最终目标文件用一个变量表示，这样我们可以很轻易地修改最终目标文件的名字；最后，我们将我们使用的编译器也用变量表示，于是我们得到：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">objects=main.o add.o sub.o mul.o</span><br><span class="line">target=app</span><br><span class="line">CC=clang++</span><br><span class="line"></span><br><span class="line"><span class="variable">$(target)</span>: <span class="variable">$(objects)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp head.h </span></span><br><span class="line"><span class="variable">$(CC)</span>  -c main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">add.o: add.cpp head.h</span></span><br><span class="line"><span class="variable">$(CC)</span>  -c add.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">sub.o: sub.cpp head.h</span></span><br><span class="line"><span class="variable">$(CC)</span>  -c sub.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">mul.o: mul.cpp head.h</span></span><br><span class="line"><span class="variable">$(CC)</span>  -c mul.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h2 id="自动推导"><a href="#自动推导" class="headerlink" title="自动推导"></a>自动推导</h2><p><code>GNU</code>的<code>make</code>很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个 <code>.o</code> 文件后都写上类似的命令，因为，我们的<code>make</code>会自动识别，并自己推导命令。</p><p>只要make看到一个 <code>.o</code> 文件，它就会自动的把 <code>.c</code> 文件加在依赖关系中，如果make找到一个 <code>whatever.o</code> ，那么 <code>whatever.c</code> 就会是 <code>whatever.o</code> 的依赖文件。并且 <code>cc -c whatever.c</code> 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的新makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objects=main.o add.o sub.o mul.o</span><br><span class="line">target=app</span><br><span class="line">CC=clang++</span><br><span class="line"></span><br><span class="line"><span class="variable">$(target)</span>: <span class="variable">$(objects)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: head.h </span></span><br><span class="line"></span><br><span class="line"><span class="section">add.o: head.h</span></span><br><span class="line"></span><br><span class="line"><span class="section">sub.o: head.h</span></span><br><span class="line"></span><br><span class="line"><span class="section">mul.o: head.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p><code>.PHONY</code>表示<code>clean</code>是一个伪目标文件。</p><p>当然，利用自动推导功能，我们可以写得更简洁一些：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects=main.o add.o sub.o mul.o</span><br><span class="line">target=app</span><br><span class="line">CC=clang++</span><br><span class="line"></span><br><span class="line"><span class="variable">$(target)</span>: <span class="variable">$(objects)</span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.o add.o sub.o mul.o:head.h</span></span><br><span class="line"><span class="variable">$(objects)</span>: head.h</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">-rm <span class="variable">$(target)</span> <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这样的写法会不会使得依赖关系更复杂？我认为是不会的。事实上，这种组织方法是基于这样的视角：按照头文件来组织我们的依赖关系。我们只需要知道，哪些程序引用了哪个头文件，这样就能阻止好我们的<code>makefile</code>。</p><p>另外，这里我们还修改了<code>rm</code>命令，在前边加了一个减号。这到底什么意思？根据<a href="https://www.gnu.org/software/make/manual/make.html">官方文档</a>的说法，这是让<code>make</code>忽略<code>rm</code>命令产生的错误而继续进行下去：</p><blockquote><p>When errors are to be ignored, because of either a ‘-’ or the ‘-i’ flag, make treats an<br>error return just like success, except that it prints out a message that tells you the status<br>code the shell exited with, and says that the error has been ignored.</p></blockquote><p>这里我们不做过多的追究，继续看下去。</p><h1 id="makefile进阶"><a href="#makefile进阶" class="headerlink" title="makefile进阶"></a>makefile进阶</h1><h2 id="makefile里有什么？"><a href="#makefile里有什么？" class="headerlink" title="makefile里有什么？"></a>makefile里有什么？</h2><p><code>makefile</code>里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li>显式规则。显式规则说明了如何生成一个或多个目标文件。这是由<code>makefile</code>的书写者<strong>明显指出</strong>要生成的文件、文件的依赖文件和生成的命令。</li><li>隐晦规则。由于我们的<code>make</code>有自动推导的功能，所以隐晦的规则可以让我们比较简略地书写 <code>makefile</code>，这是由<code>make</code>所支持的。</li><li>变量的定义。在<code>makefile</code>中我们要定义一系列的变量，变量一般都是字符串，这个有点像你<code>C</code>语言中的宏，当<code>makefile</code>被执行时，其中的变量都会被扩展到相应的引用位置上。</li><li>文件指示。其包括了三个部分，一个是在一个<code>makefile</code>中引用另一个<code>makefile</code>，<strong>就像<code>C</code>语言中的<code>include</code>一样</strong>；另一个是指根据某些情况指定<code>makefile</code>中的有效部分，<strong>就像<code>C</code>语言中的预编译<code>#if</code>一样</strong>；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。</li><li>注释。<code>makefile</code>中只有行注释，和<code>UNIX</code>的<code>Shell</code>脚本一样，其注释是用 <code>#</code> 字符，这个就像<code>C/C++</code>中的 <code>//</code> 一样。如果你要在你的<code>makefile</code>中使用 <code>#</code> 字符，可以用反斜杠进行转义，如： <code>\#</code> 。</li></ol><p>最后，还值得一提的是，在<code>makefile</code>中的命令，必须要以 <code>Tab</code> 键开始。</p><h2 id="makefile的文件名"><a href="#makefile的文件名" class="headerlink" title="makefile的文件名"></a>makefile的文件名</h2><p>一般建议使用<code>makefile</code>作为文件名，如果使用别的文件名来写<code>makefile</code>，则需要这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -f makefile.linux #using makefile.linux as the file name of makefile</span><br></pre></td></tr></table></figure><h2 id="引用其他的makefile"><a href="#引用其他的makefile" class="headerlink" title="引用其他的makefile"></a>引用其他的makefile</h2><p>和<code>C</code>语言类似，我们用<code>include</code>来引用其他的文件：</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-include</span> a.mk b.mk $HOME/c.mk</span><br></pre></td></tr></table></figure><p> 这里的减号同样是为了忽略错误用。</p><h1 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h1><p>下面，我们正式来讲解一下书写规则，什么是书写规则？一个是依赖关系，一个是生成目标的方法。回忆最早我们书写makefile时的做法：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target ... : pre ... <span class="comment"># 依赖关系</span></span><br><span class="line">cmd                <span class="comment"># 生成目标的方法（若为编译指令）</span></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>虽然看了上边的内容，简单的makefile是会写的，但我们还是应当有点更高的追求才行。</p><h2 id="规则中使用通配符"><a href="#规则中使用通配符" class="headerlink" title="规则中使用通配符"></a>规则中使用通配符</h2><p><code>make</code>支持3个通配符：<code>*</code> <code>?</code> <code>~</code></p><p>通配符除了在shell命令中能够用到，也可以应用在规则中。</p><p>比如，我们如果想让变量的值设定为所有的目标文件，可以这么做：</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects:=<span class="variable">$(<span class="built_in">wildcard</span> *.o)</span></span><br></pre></td></tr></table></figure><p> 这样，我们的都变量指向的就是所有的目标文件集合。</p><h2 id="文件搜寻"><a href="#文件搜寻" class="headerlink" title="文件搜寻"></a>文件搜寻</h2><p>在一些庞大的工程中，我们可能会用多个文件夹来存放代码文件进行分类。搜寻这些文件可以让<code>make</code>去做。</p><p><code>makefile</code>中的特殊变量<code>VPATH</code>就是完成这个功能的。</p><p>假设有下面的目录树，我们看看怎么样编写<code>makefile</code>好一些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── lib</span><br><span class="line">│   ├── add.cpp</span><br><span class="line">│   ├── head.h</span><br><span class="line">│   ├── mul.cpp</span><br><span class="line">│   └── sub.cpp</span><br><span class="line">├── makefile</span><br><span class="line">└── src</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><p>这也是很多项目组织源代码的结构——这种情况最好采用<code>makefile</code>的自动化编译，不然会很难受的。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># compile macro</span></span><br><span class="line">CC= clang++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># user modify: subdir, target and objects</span></span><br><span class="line">VPATH = lib src</span><br><span class="line">EXENAME = app</span><br><span class="line">OBJECTS= main.o add.o sub.o mul.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># make target</span></span><br><span class="line"><span class="section">all:$&#123;OBJECTS&#125;</span></span><br><span class="line">$&#123;CC&#125; -o $&#123;EXENAME&#125; *.o </span><br><span class="line"></span><br><span class="line"><span class="comment"># make clean</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean cleanObj</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">-rm -rf $&#123;EXENAME&#125; $&#123;OBJECTS&#125; </span><br><span class="line"></span><br><span class="line"><span class="section">cleanObj:</span></span><br><span class="line">-rm -rf $&#123;OBJECTS&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># dependence</span></span><br><span class="line">%.o : %.cpp</span><br><span class="line">$&#123;CC&#125;  -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是我们最终的<code>makefile</code>，也是一个模版。当然还需要加上<code>CFLAG</code>这样的变量，但已经是能用的了。</p><p>这里解释一下最难懂的最后一行。</p><p>最后一行事实上使用了模式匹配和自动化变量，它们的搭配使得我们能够成功地实现依赖。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>先更新到这里。目前的这些内容都是够用的。将来也会有一些内容，例如：</p><ul><li>安装</li><li>条件的使用</li></ul><p>这些是之后的更新内容。看情况会否填坑。之后我也将进入<code>CMake</code>的学习，一个更加复杂更加抽象但更强大的工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;什么是&lt;code&gt;makefile&lt;/code&gt;？事实上它是一个项目编译的指导性文件，它定义了一系列的规则，指导编译器工作。会写&lt;code&gt;</summary>
      
    
    
    
    <category term="Toolbox" scheme="http://example.com/categories/Toolbox/"/>
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
    <category term="development kit" scheme="http://example.com/tags/development-kit/"/>
    
    <category term="tutorial" scheme="http://example.com/tags/tutorial/"/>
    
  </entry>
  
</feed>
